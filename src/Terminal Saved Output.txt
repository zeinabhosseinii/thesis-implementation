Last login: Tue Sep 16 17:03:08 on ttys000
xattr -d com.apple.quarantine /path/to/Afra.app

➜  ~ xattr -d com.apple.quarantine /path/to/Afra.app
xattr: No such file: /path/to/Afra.app
➜  ~ 
➜  ~ xattr -d com.apple.quarantine /path/to/Afra    

xattr: No such file: /path/to/Afra
➜  ~ xattr -d com.apple.quarantine ~/Desktop/Afra.app

➜  ~ open ~/Desktop/Afra.app

➜  ~ touch /Users/phone/Desktop/thesis-implementation/src/__init__.py

➜  ~ cd ~/Desktop/thesis-implementation
➜  thesis-implementation git:(main) ✗ python3 -m src.main
Processing class: Customer
Processing vars for actor: Customer
Adding statevar sent to Customer
Processing method customer for actor Customer
Method customer writes to sent
Method customer sends start to self
Processing method start for actor Customer
Method start sends ask to agent
Method start writes to sent
Processing method done for actor Customer
Method done writes to sent
Processing class: Agent
Processing vars for actor: Agent
Adding statevar dummy to Agent
Processing method agent for actor Agent
Processing method ask for actor Agent
Method ask sends process to ticketService
Processing class: TicketService
Processing vars for actor: TicketService
Adding statevar dummy to TicketService
Processing method ticketService for actor TicketService
Processing method process for actor TicketService
Method process sends done to customer
Processing main block
Found actor instance: c1 of class Customer, priority None
Found actor instance: c2 of class Customer, priority None
Found actor instance: agent of class Agent, priority None
Found actor instance: ticketService of class TicketService, priority None
✅ AST graph saved as AST.png

=== Analysis Result ===
{'actors': {'Agent': {'methods': {'agent': {'priority': None,
                                            'reads': set(),
                                            'sends': [],
                                            'writes': set()},
                                  'ask': {'priority': None,
                                          'reads': set(),
                                          'sends': [('ticketService',
                                                     'process')],
                                          'writes': set()}},
                      'statevars': {'dummy'}},
            'Customer': {'methods': {'customer': {'priority': None,
                                                  'reads': set(),
                                                  'sends': [('self', 'start')],
                                                  'writes': {'sent'}},
                                     'done': {'priority': None,
                                              'reads': set(),
                                              'sends': [],
                                              'writes': {'sent'}},
                                     'start': {'priority': None,
                                               'reads': set(),
                                               'sends': [('agent', 'ask')],
                                               'writes': {'sent'}}},
                         'statevars': {'sent'}},
            'TicketService': {'methods': {'process': {'priority': None,
                                                      'reads': set(),
                                                      'sends': [('customer',
                                                                 'done')],
                                                      'writes': set()},
                                          'ticketService': {'priority': None,
                                                            'reads': set(),
                                                            'sends': [],
                                                            'writes': set()}},
                              'statevars': {'dummy'}}},
 'main_instances': [{'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c1',
                     'priority': None},
                    {'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c2',
                     'priority': None},
                    {'arg': 'Agent',
                     'class': 'Agent',
                     'name': 'agent',
                     'priority': None},
                    {'arg': 'TicketService',
                     'class': 'TicketService',
                     'name': 'ticketService',
                     'priority': None}]}

=== Dependency-Guided Test Generation using ERDG ===

=== Building ERDG ===
Created rebec node: c1 (Customer)
Created rebec node: c2 (Customer)
Created rebec node: agent (Agent)
Created rebec node: ticketService (TicketService)
Created message server: c1.customer
Created message server: c1.start
Created message server: c1.done
Created message server: c2.customer
Created message server: c2.start
Created message server: c2.done
Created message server: agent.agent
Created message server: agent.ask
Created message server: ticketService.ticketService
Created message server: ticketService.process
Created activation: c1.customer -> c1.start
Created activation: c1.start -> agent.ask
Created activation: c2.customer -> c2.start
Created activation: c2.start -> agent.ask
Created activation: agent.ask -> ticketService.process
Created activation: ticketService.process -> c2.done
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c1.start → c1.done for variable sent
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c2.start → c2.done for variable sent
ERDG built successfully!
- Rebec nodes: 4
- Message server nodes: 10
- Activation nodes: 6
- Total edges: 30

=== Step 1: Building Actor Dependency Graph ===
Added actor dependency edge: c1 <-> c2
Added actor dependency edge: c2 <-> ticketService
Actor Dependency Graph: 2 edges
✅ Actor Dependency Graph saved as AG.png

=== Step 2: Identifying Actor Groups and Building HAG ===
Found 2 actor groups:
  Group 1: ['c1', 'c2', 'ticketService']
  Group 2: ['agent']
Added HAG edge: Group 1 -> Group 2
Added HAG edge: Group 2 -> Group 1
⚠️ Cycle detected between groups 1 and 2, resolved order: [1, 2]
✅ HAG saved as HAG.png

=== Step 3: Assigning Priorities to Actors ===
Processing group 1: ['c1', 'c2', 'ticketService']
  Permutation: ('c1', 'c2', 'ticketService') -> Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3}
  Permutation: ('c1', 'ticketService', 'c2') -> Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3}
  Permutation: ('c2', 'c1', 'ticketService') -> Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3}
  Permutation: ('c2', 'ticketService', 'c1') -> Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3}
  Permutation: ('ticketService', 'c1', 'c2') -> Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3}
  Permutation: ('ticketService', 'c2', 'c1') -> Priorities: {'ticketService': 1, 'c2': 2, 'c1': 3}
Processing group 2: ['agent']
  Fixed assignment for agent -> Priority 4
Generated 6 actor priority assignments

=== Step 4: Identifying Message Dependency Components ===
Processing class Customer
  Class Customer: 2 permutations
Processing class Agent
  Class Agent: 1 permutations
Processing class TicketService
  Class TicketService: 1 permutations

=== Step 5: Generating Prioritized Test Cases ===
Generated 12 test cases
✅ ERDG graph saved as ERDG.png

=== Generated Test Cases (12) ===

Test Case 1:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 2:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 3:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 4:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 5:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 6:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 7:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 8:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 9:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 10:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

... and 2 more test cases

✅ Results saved to generated_test_cases.txt
Processing class: Customer
Processing vars for actor: Customer
Adding statevar sent to Customer
Processing method customer for actor Customer
Method customer writes to sent
Method customer sends start to self
Processing method start for actor Customer
Method start sends ask to agent
Method start writes to sent
Processing method done for actor Customer
Method done writes to sent
Processing class: Agent
Processing vars for actor: Agent
Adding statevar dummy to Agent
Processing method agent for actor Agent
Processing method ask for actor Agent
Method ask sends process to ticketService
Processing class: TicketService
Processing vars for actor: TicketService
Adding statevar dummy to TicketService
Processing method ticketService for actor TicketService
Processing method process for actor TicketService
Method process sends done to customer
Processing main block
Found actor instance: c1 of class Customer, priority None
Found actor instance: c2 of class Customer, priority None
Found actor instance: agent of class Agent, priority None
Found actor instance: ticketService of class TicketService, priority None
✅ AST graph saved as AST.png

=== Analysis Result ===
{'actors': {'Agent': {'methods': {'agent': {'priority': None,
                                            'reads': set(),
                                            'sends': [],
                                            'writes': set()},
                                  'ask': {'priority': None,
                                          'reads': set(),
                                          'sends': [('ticketService',
                                                     'process')],
                                          'writes': set()}},
                      'statevars': {'dummy'}},
            'Customer': {'methods': {'customer': {'priority': None,
                                                  'reads': set(),
                                                  'sends': [('self', 'start')],
                                                  'writes': {'sent'}},
                                     'done': {'priority': None,
                                              'reads': set(),
                                              'sends': [],
                                              'writes': {'sent'}},
                                     'start': {'priority': None,
                                               'reads': set(),
                                               'sends': [('agent', 'ask')],
                                               'writes': {'sent'}}},
                         'statevars': {'sent'}},
            'TicketService': {'methods': {'process': {'priority': None,
                                                      'reads': set(),
                                                      'sends': [('customer',
                                                                 'done')],
                                                      'writes': set()},
                                          'ticketService': {'priority': None,
                                                            'reads': set(),
                                                            'sends': [],
                                                            'writes': set()}},
                              'statevars': {'dummy'}}},
 'main_instances': [{'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c1',
                     'priority': None},
                    {'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c2',
                     'priority': None},
                    {'arg': 'Agent',
                     'class': 'Agent',
                     'name': 'agent',
                     'priority': None},
                    {'arg': 'TicketService',
                     'class': 'TicketService',
                     'name': 'ticketService',
                     'priority': None}]}

=== Dependency-Guided Test Generation using ERDG ===

=== Building ERDG ===
Created rebec node: c1 (Customer)
Created rebec node: c2 (Customer)
Created rebec node: agent (Agent)
Created rebec node: ticketService (TicketService)
Created message server: c1.customer
Created message server: c1.start
Created message server: c1.done
Created message server: c2.customer
Created message server: c2.start
Created message server: c2.done
Created message server: agent.agent
Created message server: agent.ask
Created message server: ticketService.ticketService
Created message server: ticketService.process
Created activation: c1.customer -> c1.start
Created activation: c1.start -> agent.ask
Created activation: c2.customer -> c2.start
Created activation: c2.start -> agent.ask
Created activation: agent.ask -> ticketService.process
Created activation: ticketService.process -> c2.done
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c1.start → c1.done for variable sent
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c2.start → c2.done for variable sent
ERDG built successfully!
- Rebec nodes: 4
- Message server nodes: 10
- Activation nodes: 6
- Total edges: 30

=== Step 1: Building Actor Dependency Graph ===
Added actor dependency edge: c1 <-> c2
Added actor dependency edge: c2 <-> ticketService
Actor Dependency Graph: 2 edges
✅ Actor Dependency Graph saved as AG.png

=== Step 2: Identifying Actor Groups and Building HAG ===
Found 2 actor groups:
  Group 1: ['c1', 'c2', 'ticketService']
  Group 2: ['agent']
Added HAG edge: Group 1 -> Group 2
Added HAG edge: Group 2 -> Group 1
⚠️ Cycle detected between groups 1 and 2, resolved order: [1, 2]
✅ HAG saved as HAG.png

=== Step 3: Assigning Priorities to Actors ===
Processing group 1: ['c1', 'c2', 'ticketService']
  Permutation: ('c1', 'c2', 'ticketService') -> Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3}
  Permutation: ('c1', 'ticketService', 'c2') -> Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3}
  Permutation: ('c2', 'c1', 'ticketService') -> Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3}
  Permutation: ('c2', 'ticketService', 'c1') -> Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3}
  Permutation: ('ticketService', 'c1', 'c2') -> Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3}
  Permutation: ('ticketService', 'c2', 'c1') -> Priorities: {'ticketService': 1, 'c2': 2, 'c1': 3}
Processing group 2: ['agent']
  Fixed assignment for agent -> Priority 4
Generated 6 actor priority assignments

=== Step 4: Identifying Message Dependency Components ===
Processing class Customer
  Class Customer: 2 permutations
Processing class Agent
  Class Agent: 1 permutations
Processing class TicketService
  Class TicketService: 1 permutations

=== Step 5: Generating Prioritized Test Cases ===
Generated 12 test cases
✅ ERDG graph saved as ERDG.png

=== Generated Test Cases (12) ===

Test Case 1:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 2:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 3:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 4:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 5:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 6:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 7:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 8:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 9:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 10:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

... and 2 more test cases

✅ Results saved to generated_test_cases.txt
➜  thesis-implementation git:(main) ✗ touch /Users/phone/Desktop/thesis-implementation/src/__init__.py

➜  thesis-implementation git:(main) ✗ cd ~/Desktop/thesis-implementation
➜  thesis-implementation git:(main) ✗ mkdir -p outputs/images 
➜  thesis-implementation git:(main) ✗ ls -R outputs

images

outputs/images:
➜  thesis-implementation git:(main) ✗ cd ~/Desktop/thesis-implementation
python3 -m src.main

Processing class: Customer
Processing vars for actor: Customer
Adding statevar sent to Customer
Processing method customer for actor Customer
Method customer writes to sent
Method customer sends start to self
Processing method start for actor Customer
Method start sends ask to agent
Method start writes to sent
Processing method done for actor Customer
Method done writes to sent
Processing class: Agent
Processing vars for actor: Agent
Adding statevar dummy to Agent
Processing method agent for actor Agent
Processing method ask for actor Agent
Method ask sends process to ticketService
Processing class: TicketService
Processing vars for actor: TicketService
Adding statevar dummy to TicketService
Processing method ticketService for actor TicketService
Processing method process for actor TicketService
Method process sends done to customer
Processing main block
Found actor instance: c1 of class Customer, priority None
Found actor instance: c2 of class Customer, priority None
Found actor instance: agent of class Agent, priority None
Found actor instance: ticketService of class TicketService, priority None
✅ AST graph saved as AST.png

=== Analysis Result ===
{'actors': {'Agent': {'methods': {'agent': {'priority': None,
                                            'reads': set(),
                                            'sends': [],
                                            'writes': set()},
                                  'ask': {'priority': None,
                                          'reads': set(),
                                          'sends': [('ticketService',
                                                     'process')],
                                          'writes': set()}},
                      'statevars': {'dummy'}},
            'Customer': {'methods': {'customer': {'priority': None,
                                                  'reads': set(),
                                                  'sends': [('self', 'start')],
                                                  'writes': {'sent'}},
                                     'done': {'priority': None,
                                              'reads': set(),
                                              'sends': [],
                                              'writes': {'sent'}},
                                     'start': {'priority': None,
                                               'reads': set(),
                                               'sends': [('agent', 'ask')],
                                               'writes': {'sent'}}},
                         'statevars': {'sent'}},
            'TicketService': {'methods': {'process': {'priority': None,
                                                      'reads': set(),
                                                      'sends': [('customer',
                                                                 'done')],
                                                      'writes': set()},
                                          'ticketService': {'priority': None,
                                                            'reads': set(),
                                                            'sends': [],
                                                            'writes': set()}},
                              'statevars': {'dummy'}}},
 'main_instances': [{'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c1',
                     'priority': None},
                    {'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c2',
                     'priority': None},
                    {'arg': 'Agent',
                     'class': 'Agent',
                     'name': 'agent',
                     'priority': None},
                    {'arg': 'TicketService',
                     'class': 'TicketService',
                     'name': 'ticketService',
                     'priority': None}]}

=== Dependency-Guided Test Generation using ERDG ===

=== Building ERDG ===
Created rebec node: c1 (Customer)
Created rebec node: c2 (Customer)
Created rebec node: agent (Agent)
Created rebec node: ticketService (TicketService)
Created message server: c1.customer
Created message server: c1.start
Created message server: c1.done
Created message server: c2.customer
Created message server: c2.start
Created message server: c2.done
Created message server: agent.agent
Created message server: agent.ask
Created message server: ticketService.ticketService
Created message server: ticketService.process
Created activation: c1.customer -> c1.start
Created activation: c1.start -> agent.ask
Created activation: c2.customer -> c2.start
Created activation: c2.start -> agent.ask
Created activation: agent.ask -> ticketService.process
Created activation: ticketService.process -> c2.done
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c1.start → c1.done for variable sent
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c2.start → c2.done for variable sent
ERDG built successfully!
- Rebec nodes: 4
- Message server nodes: 10
- Activation nodes: 6
- Total edges: 30

=== Step 1: Building Actor Dependency Graph ===
Added actor dependency edge: c1 <-> c2
Added actor dependency edge: c2 <-> ticketService
Actor Dependency Graph: 2 edges
✅ Actor Dependency Graph saved as AG.png

=== Step 2: Identifying Actor Groups and Building HAG ===
Found 2 actor groups:
  Group 1: ['c1', 'c2', 'ticketService']
  Group 2: ['agent']
Added HAG edge: Group 1 -> Group 2
Added HAG edge: Group 2 -> Group 1
⚠️ Cycle detected between groups 1 and 2, resolved order: [1, 2]
✅ HAG saved as HAG.png

=== Step 3: Assigning Priorities to Actors ===
Processing group 1: ['c1', 'c2', 'ticketService']
  Permutation: ('c1', 'c2', 'ticketService') -> Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3}
  Permutation: ('c1', 'ticketService', 'c2') -> Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3}
  Permutation: ('c2', 'c1', 'ticketService') -> Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3}
  Permutation: ('c2', 'ticketService', 'c1') -> Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3}
  Permutation: ('ticketService', 'c1', 'c2') -> Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3}
  Permutation: ('ticketService', 'c2', 'c1') -> Priorities: {'ticketService': 1, 'c2': 2, 'c1': 3}
Processing group 2: ['agent']
  Fixed assignment for agent -> Priority 4
Generated 6 actor priority assignments

=== Step 4: Identifying Message Dependency Components ===
Processing class Customer
  Class Customer: 2 permutations
Processing class Agent
  Class Agent: 1 permutations
Processing class TicketService
  Class TicketService: 1 permutations

=== Step 5: Generating Prioritized Test Cases ===
Generated 12 test cases
✅ ERDG graph saved as ERDG.png

=== Generated Test Cases (12) ===

Test Case 1:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 2:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 3:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 4:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 5:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 6:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 7:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 8:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 9:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 10:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

... and 2 more test cases

✅ Results saved to generated_test_cases.txt
Processing class: Customer
Processing vars for actor: Customer
Adding statevar sent to Customer
Processing method customer for actor Customer
Method customer writes to sent
Method customer sends start to self
Processing method start for actor Customer
Method start sends ask to agent
Method start writes to sent
Processing method done for actor Customer
Method done writes to sent
Processing class: Agent
Processing vars for actor: Agent
Adding statevar dummy to Agent
Processing method agent for actor Agent
Processing method ask for actor Agent
Method ask sends process to ticketService
Processing class: TicketService
Processing vars for actor: TicketService
Adding statevar dummy to TicketService
Processing method ticketService for actor TicketService
Processing method process for actor TicketService
Method process sends done to customer
Processing main block
Found actor instance: c1 of class Customer, priority None
Found actor instance: c2 of class Customer, priority None
Found actor instance: agent of class Agent, priority None
Found actor instance: ticketService of class TicketService, priority None
✅ AST graph saved as AST.png

=== Analysis Result ===
{'actors': {'Agent': {'methods': {'agent': {'priority': None,
                                            'reads': set(),
                                            'sends': [],
                                            'writes': set()},
                                  'ask': {'priority': None,
                                          'reads': set(),
                                          'sends': [('ticketService',
                                                     'process')],
                                          'writes': set()}},
                      'statevars': {'dummy'}},
            'Customer': {'methods': {'customer': {'priority': None,
                                                  'reads': set(),
                                                  'sends': [('self', 'start')],
                                                  'writes': {'sent'}},
                                     'done': {'priority': None,
                                              'reads': set(),
                                              'sends': [],
                                              'writes': {'sent'}},
                                     'start': {'priority': None,
                                               'reads': set(),
                                               'sends': [('agent', 'ask')],
                                               'writes': {'sent'}}},
                         'statevars': {'sent'}},
            'TicketService': {'methods': {'process': {'priority': None,
                                                      'reads': set(),
                                                      'sends': [('customer',
                                                                 'done')],
                                                      'writes': set()},
                                          'ticketService': {'priority': None,
                                                            'reads': set(),
                                                            'sends': [],
                                                            'writes': set()}},
                              'statevars': {'dummy'}}},
 'main_instances': [{'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c1',
                     'priority': None},
                    {'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c2',
                     'priority': None},
                    {'arg': 'Agent',
                     'class': 'Agent',
                     'name': 'agent',
                     'priority': None},
                    {'arg': 'TicketService',
                     'class': 'TicketService',
                     'name': 'ticketService',
                     'priority': None}]}

=== Dependency-Guided Test Generation using ERDG ===

=== Building ERDG ===
Created rebec node: c1 (Customer)
Created rebec node: c2 (Customer)
Created rebec node: agent (Agent)
Created rebec node: ticketService (TicketService)
Created message server: c1.customer
Created message server: c1.start
Created message server: c1.done
Created message server: c2.customer
Created message server: c2.start
Created message server: c2.done
Created message server: agent.agent
Created message server: agent.ask
Created message server: ticketService.ticketService
Created message server: ticketService.process
Created activation: c1.customer -> c1.start
Created activation: c1.start -> agent.ask
Created activation: c2.customer -> c2.start
Created activation: c2.start -> agent.ask
Created activation: agent.ask -> ticketService.process
Created activation: ticketService.process -> c2.done
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c1.start → c1.done for variable sent
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c2.start → c2.done for variable sent
ERDG built successfully!
- Rebec nodes: 4
- Message server nodes: 10
- Activation nodes: 6
- Total edges: 30

=== Step 1: Building Actor Dependency Graph ===
Added actor dependency edge: c1 <-> c2
Added actor dependency edge: c2 <-> ticketService
Actor Dependency Graph: 2 edges
✅ Actor Dependency Graph saved as AG.png

=== Step 2: Identifying Actor Groups and Building HAG ===
Found 2 actor groups:
  Group 1: ['c1', 'c2', 'ticketService']
  Group 2: ['agent']
Added HAG edge: Group 1 -> Group 2
Added HAG edge: Group 2 -> Group 1
⚠️ Cycle detected between groups 1 and 2, resolved order: [1, 2]
✅ HAG saved as HAG.png

=== Step 3: Assigning Priorities to Actors ===
Processing group 1: ['c1', 'c2', 'ticketService']
  Permutation: ('c1', 'c2', 'ticketService') -> Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3}
  Permutation: ('c1', 'ticketService', 'c2') -> Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3}
  Permutation: ('c2', 'c1', 'ticketService') -> Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3}
  Permutation: ('c2', 'ticketService', 'c1') -> Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3}
  Permutation: ('ticketService', 'c1', 'c2') -> Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3}
  Permutation: ('ticketService', 'c2', 'c1') -> Priorities: {'ticketService': 1, 'c2': 2, 'c1': 3}
Processing group 2: ['agent']
  Fixed assignment for agent -> Priority 4
Generated 6 actor priority assignments

=== Step 4: Identifying Message Dependency Components ===
Processing class Customer
  Class Customer: 2 permutations
Processing class Agent
  Class Agent: 1 permutations
Processing class TicketService
  Class TicketService: 1 permutations

=== Step 5: Generating Prioritized Test Cases ===
Generated 12 test cases
✅ ERDG graph saved as ERDG.png

=== Generated Test Cases (12) ===

Test Case 1:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 2:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 3:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 4:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 5:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 6:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 7:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 8:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 9:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 10:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

... and 2 more test cases

✅ Results saved to generated_test_cases.txt
➜  thesis-implementation git:(main) ✗ cd ~/Desktop/thesis-implementation

➜  thesis-implementation git:(main) ✗ touch src/__init__.py

➜  thesis-implementation git:(main) ✗ python3 -m src.main

Processing class: Customer
Processing vars for actor: Customer
Adding statevar sent to Customer
Processing method customer for actor Customer
Method customer writes to sent
Method customer sends start to self
Processing method start for actor Customer
Method start sends ask to agent
Method start writes to sent
Processing method done for actor Customer
Method done writes to sent
Processing class: Agent
Processing vars for actor: Agent
Adding statevar dummy to Agent
Processing method agent for actor Agent
Processing method ask for actor Agent
Method ask sends process to ticketService
Processing class: TicketService
Processing vars for actor: TicketService
Adding statevar dummy to TicketService
Processing method ticketService for actor TicketService
Processing method process for actor TicketService
Method process sends done to customer
Processing main block
Found actor instance: c1 of class Customer, priority None
Found actor instance: c2 of class Customer, priority None
Found actor instance: agent of class Agent, priority None
Found actor instance: ticketService of class TicketService, priority None
✅ AST graph saved as AST.png

=== Analysis Result ===
{'actors': {'Agent': {'methods': {'agent': {'priority': None,
                                            'reads': set(),
                                            'sends': [],
                                            'writes': set()},
                                  'ask': {'priority': None,
                                          'reads': set(),
                                          'sends': [('ticketService',
                                                     'process')],
                                          'writes': set()}},
                      'statevars': {'dummy'}},
            'Customer': {'methods': {'customer': {'priority': None,
                                                  'reads': set(),
                                                  'sends': [('self', 'start')],
                                                  'writes': {'sent'}},
                                     'done': {'priority': None,
                                              'reads': set(),
                                              'sends': [],
                                              'writes': {'sent'}},
                                     'start': {'priority': None,
                                               'reads': set(),
                                               'sends': [('agent', 'ask')],
                                               'writes': {'sent'}}},
                         'statevars': {'sent'}},
            'TicketService': {'methods': {'process': {'priority': None,
                                                      'reads': set(),
                                                      'sends': [('customer',
                                                                 'done')],
                                                      'writes': set()},
                                          'ticketService': {'priority': None,
                                                            'reads': set(),
                                                            'sends': [],
                                                            'writes': set()}},
                              'statevars': {'dummy'}}},
 'main_instances': [{'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c1',
                     'priority': None},
                    {'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c2',
                     'priority': None},
                    {'arg': 'Agent',
                     'class': 'Agent',
                     'name': 'agent',
                     'priority': None},
                    {'arg': 'TicketService',
                     'class': 'TicketService',
                     'name': 'ticketService',
                     'priority': None}]}

=== Dependency-Guided Test Generation using ERDG ===

=== Building ERDG ===
Created rebec node: c1 (Customer)
Created rebec node: c2 (Customer)
Created rebec node: agent (Agent)
Created rebec node: ticketService (TicketService)
Created message server: c1.customer
Created message server: c1.start
Created message server: c1.done
Created message server: c2.customer
Created message server: c2.start
Created message server: c2.done
Created message server: agent.agent
Created message server: agent.ask
Created message server: ticketService.ticketService
Created message server: ticketService.process
Created activation: c1.customer -> c1.start
Created activation: c1.start -> agent.ask
Created activation: c2.customer -> c2.start
Created activation: c2.start -> agent.ask
Created activation: agent.ask -> ticketService.process
Created activation: ticketService.process -> c2.done
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c1.start → c1.done for variable sent
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c2.start → c2.done for variable sent
ERDG built successfully!
- Rebec nodes: 4
- Message server nodes: 10
- Activation nodes: 6
- Total edges: 30

=== Step 1: Building Actor Dependency Graph ===
Added actor dependency edge: c1 <-> c2
Added actor dependency edge: c2 <-> ticketService
Actor Dependency Graph: 2 edges
✅ Actor Dependency Graph saved as AG.png

=== Step 2: Identifying Actor Groups and Building HAG ===
Found 2 actor groups:
  Group 1: ['c1', 'c2', 'ticketService']
  Group 2: ['agent']
Added HAG edge: Group 1 -> Group 2
Added HAG edge: Group 2 -> Group 1
⚠️ Cycle detected between groups 1 and 2, resolved order: [1, 2]
✅ HAG saved as HAG.png

=== Step 3: Assigning Priorities to Actors ===
Processing group 1: ['c1', 'c2', 'ticketService']
  Permutation: ('c1', 'c2', 'ticketService') -> Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3}
  Permutation: ('c1', 'ticketService', 'c2') -> Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3}
  Permutation: ('c2', 'c1', 'ticketService') -> Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3}
  Permutation: ('c2', 'ticketService', 'c1') -> Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3}
  Permutation: ('ticketService', 'c1', 'c2') -> Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3}
  Permutation: ('ticketService', 'c2', 'c1') -> Priorities: {'ticketService': 1, 'c2': 2, 'c1': 3}
Processing group 2: ['agent']
  Fixed assignment for agent -> Priority 4
Generated 6 actor priority assignments

=== Step 4: Identifying Message Dependency Components ===
Processing class Customer
  Class Customer: 2 permutations
Processing class Agent
  Class Agent: 1 permutations
Processing class TicketService
  Class TicketService: 1 permutations

=== Step 5: Generating Prioritized Test Cases ===
Generated 12 test cases
✅ ERDG graph saved as ERDG.png

=== Generated Test Cases (12) ===

Test Case 1:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 2:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 3:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 4:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 5:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 6:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 7:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 8:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 9:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 10:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

... and 2 more test cases

✅ Results saved to generated_test_cases.txt
Processing class: Customer
Processing vars for actor: Customer
Adding statevar sent to Customer
Processing method customer for actor Customer
Method customer writes to sent
Method customer sends start to self
Processing method start for actor Customer
Method start sends ask to agent
Method start writes to sent
Processing method done for actor Customer
Method done writes to sent
Processing class: Agent
Processing vars for actor: Agent
Adding statevar dummy to Agent
Processing method agent for actor Agent
Processing method ask for actor Agent
Method ask sends process to ticketService
Processing class: TicketService
Processing vars for actor: TicketService
Adding statevar dummy to TicketService
Processing method ticketService for actor TicketService
Processing method process for actor TicketService
Method process sends done to customer
Processing main block
Found actor instance: c1 of class Customer, priority None
Found actor instance: c2 of class Customer, priority None
Found actor instance: agent of class Agent, priority None
Found actor instance: ticketService of class TicketService, priority None
✅ AST graph saved as AST.png

=== Analysis Result ===
{'actors': {'Agent': {'methods': {'agent': {'priority': None,
                                            'reads': set(),
                                            'sends': [],
                                            'writes': set()},
                                  'ask': {'priority': None,
                                          'reads': set(),
                                          'sends': [('ticketService',
                                                     'process')],
                                          'writes': set()}},
                      'statevars': {'dummy'}},
            'Customer': {'methods': {'customer': {'priority': None,
                                                  'reads': set(),
                                                  'sends': [('self', 'start')],
                                                  'writes': {'sent'}},
                                     'done': {'priority': None,
                                              'reads': set(),
                                              'sends': [],
                                              'writes': {'sent'}},
                                     'start': {'priority': None,
                                               'reads': set(),
                                               'sends': [('agent', 'ask')],
                                               'writes': {'sent'}}},
                         'statevars': {'sent'}},
            'TicketService': {'methods': {'process': {'priority': None,
                                                      'reads': set(),
                                                      'sends': [('customer',
                                                                 'done')],
                                                      'writes': set()},
                                          'ticketService': {'priority': None,
                                                            'reads': set(),
                                                            'sends': [],
                                                            'writes': set()}},
                              'statevars': {'dummy'}}},
 'main_instances': [{'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c1',
                     'priority': None},
                    {'arg': 'Customer',
                     'class': 'Customer',
                     'name': 'c2',
                     'priority': None},
                    {'arg': 'Agent',
                     'class': 'Agent',
                     'name': 'agent',
                     'priority': None},
                    {'arg': 'TicketService',
                     'class': 'TicketService',
                     'name': 'ticketService',
                     'priority': None}]}

=== Dependency-Guided Test Generation using ERDG ===

=== Building ERDG ===
Created rebec node: c1 (Customer)
Created rebec node: c2 (Customer)
Created rebec node: agent (Agent)
Created rebec node: ticketService (TicketService)
Created message server: c1.customer
Created message server: c1.start
Created message server: c1.done
Created message server: c2.customer
Created message server: c2.start
Created message server: c2.done
Created message server: agent.agent
Created message server: agent.ask
Created message server: ticketService.ticketService
Created message server: ticketService.process
Created activation: c1.customer -> c1.start
Created activation: c1.start -> agent.ask
Created activation: c2.customer -> c2.start
Created activation: c2.start -> agent.ask
Created activation: agent.ask -> ticketService.process
Created activation: ticketService.process -> c2.done
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c1.start → c1.done for variable sent
Skipping E_I edge for constructor method: customer in class Customer
Added E_I edge (write-after-write): c2.start → c2.done for variable sent
ERDG built successfully!
- Rebec nodes: 4
- Message server nodes: 10
- Activation nodes: 6
- Total edges: 30

=== Step 1: Building Actor Dependency Graph ===
Added actor dependency edge: c1 <-> c2
Added actor dependency edge: c2 <-> ticketService
Actor Dependency Graph: 2 edges
✅ Actor Dependency Graph saved as AG.png

=== Step 2: Identifying Actor Groups and Building HAG ===
Found 2 actor groups:
  Group 1: ['c1', 'c2', 'ticketService']
  Group 2: ['agent']
Added HAG edge: Group 1 -> Group 2
Added HAG edge: Group 2 -> Group 1
⚠️ Cycle detected between groups 1 and 2, resolved order: [1, 2]
✅ HAG saved as HAG.png

=== Step 3: Assigning Priorities to Actors ===
Processing group 1: ['c1', 'c2', 'ticketService']
  Permutation: ('c1', 'c2', 'ticketService') -> Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3}
  Permutation: ('c1', 'ticketService', 'c2') -> Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3}
  Permutation: ('c2', 'c1', 'ticketService') -> Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3}
  Permutation: ('c2', 'ticketService', 'c1') -> Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3}
  Permutation: ('ticketService', 'c1', 'c2') -> Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3}
  Permutation: ('ticketService', 'c2', 'c1') -> Priorities: {'ticketService': 1, 'c2': 2, 'c1': 3}
Processing group 2: ['agent']
  Fixed assignment for agent -> Priority 4
Generated 6 actor priority assignments

=== Step 4: Identifying Message Dependency Components ===
Processing class Customer
  Class Customer: 2 permutations
Processing class Agent
  Class Agent: 1 permutations
Processing class TicketService
  Class TicketService: 1 permutations

=== Step 5: Generating Prioritized Test Cases ===
Generated 12 test cases
✅ ERDG graph saved as ERDG.png

=== Generated Test Cases (12) ===

Test Case 1:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 2:
  Actor Priorities: {'c1': 1, 'c2': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 3:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 4:
  Actor Priorities: {'c1': 1, 'ticketService': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 5:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 6:
  Actor Priorities: {'c2': 1, 'c1': 2, 'ticketService': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 7:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 8:
  Actor Priorities: {'c2': 1, 'ticketService': 2, 'c1': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 9:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'start': 1, 'done': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

Test Case 10:
  Actor Priorities: {'ticketService': 1, 'c1': 2, 'c2': 3, 'agent': 4}
  Method Priorities:
    Customer: {'done': 1, 'start': 2}
    Agent: {'ask': 1}
    TicketService: {'process': 1}

... and 2 more test cases

✅ Results saved to generated_test_cases.txt
➜  thesis-implementation git:(main) ✗ mkdir -p ~/Desktop/thesis-implementation/.vscode

➜  thesis-implementation git:(main) ✗ nano ~/Desktop/thesis-implementation/.vscode/settings.json


File: /Users/phone/Desktop/thesis-implementation/.vscode/settings.json  Modified

{
  "python.analysis.extraPaths": ["./src"]
}

 















^G Get Help  ^O WriteOut  ^R Read File ^Y Prev Pg   ^K Cut Text  ^C Cur Pos   
^X Exit      ^J Justify   ^W Where is  ^V Next Pg   ^U UnCut Text^T To Spell  
