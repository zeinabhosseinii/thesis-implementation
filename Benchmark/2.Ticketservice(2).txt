reactiveclass Customer(3) {
	knownrebecs {
		Agent a;
	}
	statevars {
		byte id;
		boolean sent;
	}
	Customer(byte myId) {
		id = myId;
		sent = false;
		self.try();
	}
	msgsrv try() {
		a.requestTicket();
	}
	msgsrv ticketIssued() {
		sent = false;
		self.try() after(30);
	}
	msgsrv reportStatus() {
		if (sent) {
			a.logStatus(id);
		} else {
			a.logStatus(id);
		}
	}
}

reactiveclass Agent(10) {
	knownrebecs {
		TicketService ts;
	}
	statevars {
		int shared;
	}
	Agent() {
		shared = 0;
	}
	msgsrv requestTicket() {
		shared = shared + 1;
		ts.requestTicket((Customer)sender) deadline(24);
	}
	msgsrv ticketIssued(Customer customer) {
		customer.ticketIssued();
		customer.reportStatus();
	}
	msgsrv logStatus(byte cid) {
		if (shared > 0){
			shared = 0;
		}
	}
}

reactiveclass TicketService(10) {
	knownrebecs {
		Agent a;
	}
	statevars {
		int issueDelay;
	}
	TicketService(int myIssueDelay) {
		issueDelay = myIssueDelay;
	}
	msgsrv requestTicket(Customer customer) {
		delay(issueDelay);
		a.ticketIssued(customer);
	}
}

main {
	Agent a(ts):();
	TicketService ts(a):(3);
	Customer c1(a):(1);
	Customer c2(a):(2);
	Customer c3(a):(3);
}
