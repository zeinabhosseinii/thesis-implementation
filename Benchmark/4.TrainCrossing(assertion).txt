env int NET_DELAY = 1;

abstract reactiveclass Train(3) {
	knownrebecs {
		SafetyBridgeController bc;
	}
	statevars {
		byte id;
	}
	msgsrv reachBridge() {
		boolean isReached = ?(true, false);
		if (isReached) {
			bc.arrive(id) after(NET_DELAY) deadline(5);
		}
		self.reachBridge() after(5);
	}
	msgsrv youMayPass() {
		delay(2);
		self.passed();
	}
	abstract msgsrv passed();
}

reactiveclass NormalTrain extends Train(3) {
	NormalTrain(byte myId) {
		id = myId;
		self.reachBridge();
	}
	msgsrv passed() {
		bc.leave() after(NET_DELAY);
	}
}

reactiveclass HazardousCargoTrain extends Train(3) {
	HazardousCargoTrain(byte myId) {
		id = myId;
		self.reachBridge();
	}
	msgsrv passed() {
		delay(5);
		self.considerSafetyDistance();
	}
	msgsrv considerSafetyDistance() {
		bc.leave() after(NET_DELAY);
		boolean dup = ?(true, false);
		if (dup) {
			bc.leave() after(NET_DELAY);
		}
	}
}

reactiveclass SafetyBridgeController(10) {
	statevars {
		int trainsOnTheBridge;
		int permitsOutstanding;
	}
	SafetyBridgeController() {
		trainsOnTheBridge = 0;
		permitsOutstanding = 0;
	}
	msgsrv arrive(byte trainId) {
		delay(1);
		if (trainsOnTheBridge == 0) {
			assertion(permitsOutstanding == 0);
			trainsOnTheBridge = trainsOnTheBridge + 1;
			permitsOutstanding = permitsOutstanding + 1;
			((Train)sender).youMayPass() after(NET_DELAY);
			assertion(trainsOnTheBridge <= 1);
			assertion(permitsOutstanding <= 1);
		}
	}
	msgsrv leave() {
		assertion(trainsOnTheBridge > 0);
		assertion(permitsOutstanding > 0);
		trainsOnTheBridge = trainsOnTheBridge - 1;
		permitsOutstanding = permitsOutstanding - 1;
		assertion(trainsOnTheBridge >= 0);
		assertion(permitsOutstanding >= 0);
		assertion(trainsOnTheBridge == permitsOutstanding);
	}
}

main {
	SafetyBridgeController controller():();
	NormalTrain train1(controller):((byte)1);
	NormalTrain train2(controller):((byte)2);
	HazardousCargoTrain train4(controller):((byte)4);
	HazardousCargoTrain train5(controller):((byte)5);
}
